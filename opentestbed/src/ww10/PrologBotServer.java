package ww10;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.io.IOUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import com.sun.xml.internal.bind.v2.runtime.Name;

import ww10.WW10Protocol.PrologBotDescription;
import ww10.gui.DataModel;

public class PrologBotServer implements Runnable {

	public final int port;

	private boolean running = true;
	private Map<String,Table> tables;

	private ServerSocket serverSocket;

	public PrologBotServer() {
		this(20000);
	}

	public PrologBotServer(int port) {
		this.port = port;
		try {
			serverSocket = new ServerSocket(port);
			//hack around JRE bug?
			serverSocket.setSoTimeout(50);
		} catch (IOException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
			System.out.println("Could not listen on port: " + port);
			System.exit(-1);
		}
		
		tables = new HashMap<String,Table>();
	}

	public void stop() throws IOException {
		running = false;
		serverSocket.close();
	}

	@Override
	public void run() {
		while (running) {
			Socket clientSocket = null;
			try {
				clientSocket = serverSocket.accept();
				System.out.println("Incoming connection");
				InputStream inputStream = clientSocket.getInputStream();
				OutputStream outputStream = clientSocket.getOutputStream();
				read(inputStream);
				inputStream.close();
				outputStream.close();
				clientSocket.close();
			} catch (SocketTimeoutException excp) {
				try {
					Thread.sleep(600);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				// try again
			} catch (IOException e) {
				System.out.println(e.getMessage());
				e.printStackTrace();
				System.out.println("Accept failed: 4444");
				System.exit(-1);
			}
		}

	}

	private void read(InputStream inputStream) {
		try {
			/*PrologBotDescription bot = PrologBotDescription.parseFrom(inputStream);
			onNewBot(bot);*/
			
			//TEST
			System.out.println("Incoming message");
			
			StringWriter writer = new StringWriter();
			IOUtils.copy(inputStream, writer);
			String request = writer.toString();
			JSONObject requestO = new JSONObject(request).getJSONObject("request");
			
			String requestType = requestO.getString("type");
			
			if(requestType.equals( "startTable")){
				//TODO: add a check for the table name
				String tableName = requestO.getString("tableName");
				int nbPlayers = requestO.getInt("nbPlayers");
				Table currTable = 
					new Table(tableName, nbPlayers);
				currTable.run();
				
				tables.put(tableName, currTable);
			}
			else if(requestType.equals( "joinTable")){
				/*String tableName = requestO.getString("tableName");
				String playerName = requestO.getString("playerName");
				String description = requestO.getString("description");
				
				onNewBot()*/
				//TODO
				
			}
			else if(requestType.equals( "fetchData")){
				String tableName = requestO.getString("tableName");
				
				JSONObject results = new JSONObject();
				JSONArray players = new JSONArray();
				
				Table table = tables.get(tableName);
				DataModel tableResults = table.getDataModel();
				
				ConcurrentHashMap<String, Double> avgProfit = tableResults.getAvgProfit();
				
				for(String player: avgProfit.keySet())
				{
					JSONObject currPlayer = new JSONObject();
					
					double avg = avgProfit.get(player);
					currPlayer.put("avg profit", avg);
					players.put(currPlayer);
				}
				
				JSONObject player = new JSONObject();
				player.put("player", players);
				
				results.put("result", player);
			}


		} catch (IOException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
			System.out.println("Could not parse from inputstream.");
			System.exit(-1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	protected void onNewBot(PrologBotDescription bot) {

	}

	public static void main(String[] args) {
		(new PrologBotServer() {
			@Override
			protected void onNewBot(PrologBotDescription bot) {
				System.out.println(bot.toString());
			}
		}).run();
	}

}
