package ww10;

import game.PublicPlayerInfo;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.HashMap;

import org.apache.commons.io.IOUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import ww10.gui.DataModel;
import bots.prologbot.PrologBot;

public class RequestHandler implements Runnable {

	private Socket clientSocket;
	private PrologBotServer server;
	
	public RequestHandler(Socket clientSocket, PrologBotServer server)
	{
		this.clientSocket = clientSocket;
		this.server = server;
	}
	@Override
	public void run() {
		try {
			System.out.println("Incoming connection");
			InputStream inputStream = clientSocket.getInputStream();
			OutputStream outputStream = clientSocket.getOutputStream();
			handleRequest(inputStream, outputStream);
			inputStream.close();
			outputStream.close();
			clientSocket.close();
		} catch (IOException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
			System.out.println("Accept failed: 4444");
			System.exit(-1);
		}
	}

	
	private void handleRequest(InputStream inputStream, OutputStream outputStream) {
		try {		
			//TEST TODO: remove
			System.out.println("Incoming message");
			
			String request = IOUtils.toString(inputStream);
			JSONObject requestO = new JSONObject(request).getJSONObject("request");
			
			String requestType = requestO.getString("type");
			
			if(requestType.equals( "startTable")){
				handleStartTableRequest(requestO);
			}
			else if(requestType.equals( "joinTable")){
				handleJoinTableRequest(requestO);			
			}
			else if(requestType.equals( "fetchData")){
				handleFetchDataRequest(outputStream, requestO);		}


		} catch (IOException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
			System.out.println("Could not parse from inputstream.");
			System.exit(-1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			// General 'Exception' comes from method Table.Run()
			// This is the problem, rather than this exception block
			e.printStackTrace();
		}
		
		System.out.println("Message handled");
			try {
				inputStream.close();
			} catch (IOException e) {
				System.out.println("Could not close inputstream");
				e.printStackTrace();
			}

	}
	
	private void handleFetchDataRequest(OutputStream outputStream,
			JSONObject requestO) throws JSONException, IOException {
		String tableName = requestO.getString("tableName");
		
		JSONObject results = new JSONObject();
		JSONArray players = new JSONArray();
		
		Table table = server.getTable(tableName);
		DataModel tableResults = table.getDataModel();
				
		for(String player: tableResults.getPlayerNames())
		{
			players.put(getPlayerStats(player, tableResults));
		}
		
		JSONObject player = new JSONObject();
		player.put("player", players);		
		results.put("result", player);
		
		System.out.println("Data packet complete");	
		String reply = results.toString();
		System.out.println("reply");
		
		DataOutputStream out = new DataOutputStream(outputStream);
		out.writeBytes(reply);
	}
	
	private void handleStartTableRequest(JSONObject requestO) throws Exception{
		//TODO: add a check for the table name
		String tableName = requestO.getString("tableName");
		int nbPlayers = requestO.getInt("nbPlayers");
		Table currTable = 
			new Table(tableName, nbPlayers);
		currTable.run();
		
		server.addTable(tableName, currTable);
	}
	
	private void handleJoinTableRequest(JSONObject requestO) throws JSONException{
		String tableName = requestO.getString("tableName");
		Table table = server.getTable(tableName);
		
		onNewBot(requestO, table);		
	}
	
	private JSONObject getPlayerStats(String player, DataModel tableResults) throws JSONException{
		JSONObject currPlayer = new JSONObject();
		currPlayer.put("name", tableResults.getChosenName(player));
		
		//Put average profit
		double avg = tableResults.getAvgProfit(player);
		
		System.out.println(player);
		System.out.println(avg);
		currPlayer.put("avg profit", avg);
		
		//Put actions
		int nbFold = tableResults.getNbFolds(player);
		int nbRaise = tableResults.getNbRaises(player);
		int nbCall = tableResults.getNbCalls(player);
		currPlayer.put("nbFolds", nbFold);
		currPlayer.put("nbRaises", nbRaise);
		currPlayer.put("nbCalls", nbCall);
		
		
		//Put thinking time
		
		long thinkingTime = tableResults.getRunTime(player);
		currPlayer.put("time used", thinkingTime);
		
		//Put rules used
		
		HashMap<String, Integer> rulesUsed = tableResults.getRulesUsed(player);
		
		JSONArray rulesJSON = new JSONArray();
		
		for(String ruleName: rulesUsed.keySet()){
			JSONObject rule = new JSONObject();
			rule.put("name", ruleName);
			rule.put("times", rulesUsed.get(ruleName));
			rulesJSON.put(rule);
		}
		
		currPlayer.put("rulesUsed", rulesJSON);
		return currPlayer;
	}

	protected void onNewBot(JSONObject botDescr, Table table) throws JSONException {
		String playerName = botDescr.getString("playerName");
		PublicPlayerInfo playerInfo = table.getGameInfo().getPlayer(playerName);
				
		if(playerInfo != null)
		{
			//player exists -- overwrite profile
			playerInfo = table.getGameInfo().getPlayer(playerName);
			
		}
		else
		{
			//player does not yet exist -- find and replace a callbot
			
			int i=0;
			boolean found = false;
			while(!found && i< table.getGameInfo().getNumPlayers())
			{
				playerInfo = table.getGameInfo().getPlayer(i);
				if(playerInfo.isCallbot()){
					found = true;
				}
				i++;
			}
		}
		
		//If neither, error, no player profile can be used
		
		PrologBot bot = (PrologBot) playerInfo.getBot();

	//	playerInfo.setName(playerName);
		playerInfo.setCallbot(false);
		bot.setProlog(botDescr.getString("description"));
		table.getDataModel().onSubmit(bot.getName(), truncate(botDescr.getString("playerName")));
	}

	
	private String truncate(String name) {
		if (name.length() > 20)
			return name.substring(0, 20);
		else
			return name;
	}
	
	
	
}
