package ww10.gui;

import java.awt.Font;
import java.util.List;
import java.util.Map.Entry;
import java.util.concurrent.ConcurrentHashMap;

import javax.swing.BorderFactory;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.util.TableOrder;

public class RulePanel extends ChartPanel {

	private static final long serialVersionUID = -4911912477781035186L;

	private final DataModel dataModel;

	private final DefaultCategoryDataset dataset;

	private final String[] rowKeys;

	public RulePanel(DataModel dataModel) {
		super(null);
		this.dataModel = dataModel;

		List<String> playerNames = dataModel.getPlayerNames();

		rowKeys = playerNames.toArray(new String[playerNames.size()]);

		dataset = new DefaultCategoryDataset();
		for (int r = 0; r < rowKeys.length; r++) {
			String rowKey = rowKeys[r];
			dataset.addValue(0, rowKey, "Geen");
		}

		final JFreeChart chart = ChartFactory.createMultiplePieChart(null, // chart title
				dataset, // dataset
				TableOrder.BY_ROW, true, // include legend
				true, false);
		final MultiplePiePlot plot = (MultiplePiePlot) chart.getPlot();
		final JFreeChart subchart = plot.getPieChart();
		final PiePlot p = (PiePlot) subchart.getPlot();

		plot.setNoDataMessage("Geen gegevens");

		//		p.setLabelGenerator(new StandardPieItemLabelGenerator("{0}"));
		p.setLabelFont(new Font("SansSerif", Font.PLAIN, 10));
		//		p.setInteriorGap(0.30);
		p.setBackgroundPaint(null);
		p.setOutlineStroke(null);
		setBorder(BorderFactory.createLoweredBevelBorder());

		setChart(chart);
	}

	public void updateRuleCounts(ConcurrentHashMap<String, ConcurrentHashMap<String, Integer>> fRuleCounts) {
		for (Entry<String, ConcurrentHashMap<String, Integer>> entry : fRuleCounts.entrySet()) {
			updateRuleCounts(entry.getKey(), entry.getValue());
		}
	}

	public void updateRuleCounts(String player, ConcurrentHashMap<String, Integer> counts) {
		for (Entry<String, Integer> entry : counts.entrySet()) {
			dataset.addValue(entry.getValue(), player, entry.getKey());
		}
	}

}
