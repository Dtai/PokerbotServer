package ww10.gui;

import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JToggleButton;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

final class SwingGUI {

	static {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (UnsupportedLookAndFeelException e) {
			e.printStackTrace();
		}
	}

	private final DataModel dataModel;
	private final boolean fullscreen;

	public SwingGUI(DataModel dataModel, boolean fullscreen) {
		this.dataModel = dataModel;
		this.fullscreen = fullscreen;
		// created by non-swing thread, so do nothing.
	}

	void initialize() {

		statusbar = new javax.swing.JProgressBar();
		actionPanel = new ActionPanel(dataModel);
		rulePanel = new RulePanel(dataModel);
		averageProfitPanel = new AverageProfitPanel(dataModel);
		runtimePanel = new RuntimePanel(dataModel);

		// set up frame
		frame = new JFrame("Wetenschapsweek");
		JSplitPane splitPane = new javax.swing.JSplitPane();

		final JTabbedPane tabs = new javax.swing.JTabbedPane();

		frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

		splitPane.setBottomComponent(tabs);

		if (fullscreen) {
			splitPane.setLeftComponent(statusbar);
		} else {
			JPanel topPanel = new JPanel();
			final JToggleButton jToggleButton1 = new javax.swing.JToggleButton("Pauze");

			jToggleButton1.addMouseListener(new MouseListener() {

				@Override
				public void mouseReleased(MouseEvent e) {
					if (jToggleButton1.getText().equals("Pauze")) {
						jToggleButton1.setText("Start");
					} else {
						jToggleButton1.setText("Pauze");
					}
					dataModel.togglePaused();
				}

				@Override
				public void mousePressed(MouseEvent e) {

				}

				@Override
				public void mouseExited(MouseEvent e) {

				}

				@Override
				public void mouseEntered(MouseEvent e) {

				}

				@Override
				public void mouseClicked(MouseEvent e) {

				}
			});

			javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(topPanel);
			topPanel.setLayout(jFrame1Layout);

			jFrame1Layout.setHorizontalGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
					javax.swing.GroupLayout.Alignment.TRAILING,
					jFrame1Layout.createSequentialGroup().addComponent(statusbar, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
							.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jToggleButton1)));
			jFrame1Layout.setVerticalGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
					.addGroup(jFrame1Layout.createSequentialGroup().addComponent(jToggleButton1))
					.addComponent(statusbar, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE));

			//			JSplitPane topSplitPane = new javax.swing.JSplitPane();
			//
			//
			//			JPanel flowNorth = new JPanel(); // defaults to centered FlowLayout
			//			flowNorth.add(jToggleButton1);
			//
			//			//			frame1.getContentPane().add(BorderLayout.NORTH, flowNorth);
			//
			//			topSplitPane.setLeftComponent(statusbar);
			//			topSplitPane.setRightComponent(jToggleButton1);

			splitPane.setLeftComponent(topPanel);
		}

		frame.getContentPane().add(splitPane);

		//		this.progressFrame.setExtendedState(Frame.MAXIMIZED_BOTH);
		//		Toolkit tk = Toolkit.getDefaultToolkit();
		//		int xSize = ((int) tk.getScreenSize().getWidth());
		//		int ySize = ((int) tk.getScreenSize().getHeight());
		//		this.progressFrame.setSize(xSize, ySize);
		//		this.progressFrame.setSize(1200, 800);
		this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		statusbar.setStringPainted(true);

		if (fullscreen) {
			//setting this causes gnome bars to be on top
			//		this.progressFrame.setResizable(false);
			this.frame.setLocation(0, 0);
			//		Toolkit tk = Toolkit.getDefaultToolkit();
			//		int xSize = ((int) tk.getScreenSize().getWidth());
			//		int ySize = ((int) tk.getScreenSize().getHeight());
			//		this.progressFrame.setSize(xSize, ySize);
			if (!this.frame.isDisplayable()) {
				// Can only do this when the frame is not visible
				this.frame.setUndecorated(true);
			}
			GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
			//		GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[1]

			if (gd.isFullScreenSupported()) {
				gd.setFullScreenWindow(this.frame);
			} else {
				// Can't run fullscreen, need to bodge around it (setSize to screen size, etc)
			}
		}
		tabs.addTab("Gemiddelde Winst", averageProfitPanel);
		tabs.addTab("Acties", actionPanel);
		tabs.addTab("Regels", rulePanel);
		tabs.addTab("Rekentijd", runtimePanel);

		this.frame.pack(); // not needed?
		this.frame.setVisible(true);

		final Timer guiUpdateTimer = new Timer(10000, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				int nbTabs = tabs.getTabCount();
				int currentTab = tabs.getSelectedIndex();
				tabs.setSelectedIndex((currentTab + 1) % nbTabs);
			}
		});
		guiUpdateTimer.setInitialDelay(0);

		tabs.addKeyListener(new KeyListener() {

			public void keyPressed(KeyEvent e) {
			}

			public void keyReleased(KeyEvent e) {
			}

			public void keyTyped(KeyEvent e) {
				if (e.getKeyChar() == 'f') {
					//					progressFrame.setResizable(false);
					//					//					progressFrame.setUndecorated(true);
					//					GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
					//					GraphicsDevice graphicsDevice = ge.getDefaultScreenDevice();
					//					graphicsDevice.setFullScreenWindow(progressFrame);
					//					//myDevice.setFullScreenWindow(null);
				} else if (e.getKeyChar() == 'x') {
					//					System.exit(0);
				} else if (e.getKeyChar() == 'c') {
					if (guiUpdateTimer.isRunning()) {
						guiUpdateTimer.stop();
					} else {
						guiUpdateTimer.start();
					}

				} else if (e.getKeyChar() == 'p') {
					dataModel.togglePaused();
				}
			}

		});
	}

	public void redraw() {

	}

	public void changeStatus(String status) {
		statusbar.setString(status);
	}

	JFrame frame;
	JProgressBar statusbar;
	ActionPanel actionPanel;
	RulePanel rulePanel;
	AverageProfitPanel averageProfitPanel;
	RuntimePanel runtimePanel;

}